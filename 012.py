"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
from math import sqrt

def triangle():
    triangle = 0
    natural = 1
    while True:
    #while natural < 100:
        triangle += natural
        yield triangle
        natural += 1

prime_list = [3]
prime_dict = {}
def is_prime(x):
    if prime_dict.has_key(x):
        return prime_dict[x]
    
    output = False
    root = sqrt(x)

    global prime_list
    for prime in prime_list:
        if prime > root:
            prime_list.append(x)
            output = True
            break

        if x % prime == 0:
            break

    prime_dict[x] = output
    return output

prime_factors_dict = {}
def prime_factors(x):
    global prime_factors_dict
    if prime_factors_dict.has_key(x):
       return prime_factors_dict[x]

    output = []
    for n in xrange(2, x+1):
        if x % n == 0 and is_prime(n):
            output.append(n)
            output.extend(prime_factors(x / n))
            break
    prime_factors_dict[x] = output
    return output

def num_divisors(l):
    product = 1
    primes = set(l)
    for prime in primes:
        product *= (l.count(prime) + 1)

    return product

for x in triangle():
    if num_divisors(prime_factors(x)) > 500:
        print x
        break

